"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var cp = require("child_process");
var _ = require("lodash");
var yazl = require("yazl");
var nls_1 = require("./nls");
var util = require("./util");
var _glob = require("glob");
var minimatch = require("minimatch");
var denodeify = require("denodeify");
var mime = require("mime");
var urljoin = require("url-join");
var validation_1 = require("./validation");
var npm_1 = require("./npm");
var readFile = denodeify(fs.readFile);
var writeFile = denodeify(fs.writeFile);
var unlink = denodeify(fs.unlink);
var exec = denodeify(cp.exec, function (err, stdout, stderr) { return [err, { stdout: stdout, stderr: stderr }]; });
var glob = denodeify(_glob);
var resourcesPath = path.join(path.dirname(__dirname), 'resources');
var vsixManifestTemplatePath = path.join(resourcesPath, 'extension.vsixmanifest');
var contentTypesTemplatePath = path.join(resourcesPath, '[Content_Types].xml');
var MinimatchOptions = { dot: true };
function read(file) {
    if (file.contents) {
        return Promise.resolve(file.contents).then(function (b) { return b.toString('utf8'); });
    }
    else {
        return readFile(file.localPath, 'utf8');
    }
}
exports.read = read;
var BaseProcessor = (function () {
    function BaseProcessor(manifest) {
        this.manifest = manifest;
        this.assets = [];
        this.vsix = Object.create(null);
    }
    BaseProcessor.prototype.onFile = function (file) { return Promise.resolve(file); };
    BaseProcessor.prototype.onEnd = function () { return Promise.resolve(null); };
    return BaseProcessor;
}());
exports.BaseProcessor = BaseProcessor;
function getUrl(url) {
    if (!url) {
        return null;
    }
    if (typeof url === 'string') {
        return url;
    }
    return url.url;
}
function getRepositoryUrl(url) {
    var result = getUrl(url);
    if (/^[^\/]+\/[^\/]+$/.test(result)) {
        return "https://github.com/" + result + ".git";
    }
    return result;
}
// Contributed by Mozilla develpoer authors
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
var ManifestProcessor = (function (_super) {
    __extends(ManifestProcessor, _super);
    function ManifestProcessor(manifest) {
        var _this = _super.call(this, manifest) || this;
        var flags = ['Public'];
        if (manifest.preview) {
            flags.push('Preview');
        }
        var repository = getRepositoryUrl(manifest.repository);
        var isGitHub = /^https:\/\/github\.com\/|^git@github\.com:/.test(repository || '');
        var enableMarketplaceQnA;
        var customerQnALink;
        if (manifest.qna === 'marketplace' || (typeof manifest.qna === 'undefined' && !isGitHub)) {
            enableMarketplaceQnA = true;
        }
        else if (typeof manifest.qna === 'string') {
            customerQnALink = manifest.qna;
        }
        else if (manifest.qna === false) {
            enableMarketplaceQnA = false;
        }
        _.assign(_this.vsix, {
            id: manifest.name,
            displayName: manifest.displayName || manifest.name,
            version: manifest.version,
            publisher: manifest.publisher,
            engine: manifest.engines['vscode'],
            description: manifest.description || '',
            categories: (manifest.categories || []).join(','),
            flags: flags.join(' '),
            links: {
                repository: repository,
                bugs: getUrl(manifest.bugs),
                homepage: manifest.homepage
            },
            galleryBanner: manifest.galleryBanner || {},
            badges: manifest.badges,
            githubMarkdown: manifest.markdown !== 'standard',
            enableMarketplaceQnA: enableMarketplaceQnA,
            customerQnALink: customerQnALink,
            extensionDependencies: _(manifest.extensionDependencies || []).uniq().join(',')
        });
        if (isGitHub) {
            _this.vsix.links.github = repository;
        }
        return _this;
    }
    return ManifestProcessor;
}(BaseProcessor));
var TagsProcessor = (function (_super) {
    __extends(TagsProcessor, _super);
    function TagsProcessor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TagsProcessor.prototype.onEnd = function () {
        var _this = this;
        var keywords = this.manifest.keywords || [];
        var trimmedKeywords = keywords.slice(0, 5);
        var promise = Promise.resolve(trimmedKeywords);
        if (keywords.length > 5) {
            console.warn("The keyword list is limited to 5 keywords; only the following keywords will be in your extension: [" + trimmedKeywords.join(', ') + "].");
            promise = util.read('Do you want to continue? [y/N] ')
                .then(function (answer) { return /^y$/i.test(answer) ? Promise.resolve(trimmedKeywords) : Promise.reject('Aborted'); });
        }
        return promise.then(function (keywords) {
            var contributes = _this.manifest.contributes;
            var activationEvents = _this.manifest.activationEvents || [];
            var doesContribute = function (name) { return contributes && contributes[name] && contributes[name].length > 0; };
            var colorThemes = doesContribute('themes') ? ['theme', 'color-theme'] : [];
            var iconThemes = doesContribute('iconThemes') ? ['theme', 'icon-theme'] : [];
            var snippets = doesContribute('snippets') ? ['snippet'] : [];
            var keybindings = doesContribute('keybindings') ? ['keybindings'] : [];
            var debuggers = doesContribute('debuggers') ? ['debuggers'] : [];
            var json = doesContribute('jsonValidation') ? ['json'] : [];
            var languageContributions = ((contributes && contributes['languages']) || [])
                .reduce(function (r, l) { return r.concat([l.id]).concat(l.aliases || []).concat((l.extensions || []).map(function (e) { return "__ext_" + e; })); }, []);
            var languageActivations = activationEvents
                .map(function (e) { return /^onLanguage:(.*)$/.exec(e); })
                .filter(function (r) { return !!r; })
                .map(function (r) { return r[1]; });
            var grammars = ((contributes && contributes['grammars']) || [])
                .map(function (g) { return g.language; });
            var description = _this.manifest.description || '';
            var descriptionKeywords = Object.keys(TagsProcessor.Keywords)
                .reduce(function (r, k) { return r.concat(new RegExp('\\b(?:' + escapeRegExp(k) + ')(?!\\w)', 'gi').test(description) ? TagsProcessor.Keywords[k] : []); }, []);
            keywords = keywords.concat(colorThemes, iconThemes, snippets, keybindings, debuggers, json, languageContributions, languageActivations, grammars, descriptionKeywords);
            _this.vsix.tags = _(keywords)
                .uniq() // deduplicate
                .compact() // remove falsey values
                .join(',');
        });
    };
    return TagsProcessor;
}(BaseProcessor));
TagsProcessor.Keywords = {
    'git': ['git'],
    'npm': ['node'],
    'spell': ['markdown'],
    'bootstrap': ['bootstrap'],
    'lint': ['linters'],
    'linting': ['linters'],
    'react': ['javascript'],
    'js': ['javsacript'],
    'node': ['javascript', 'node'],
    'c++': ['c++'],
    'Cplusplus': ['c++'],
    'xml': ['xml'],
    'angular': ['javascript'],
    'jquery': ['javascript'],
    'php': ['php'],
    'python': ['python'],
    'latex': ['latex'],
    'ruby': ['ruby'],
    'java': ['java'],
    'erlang': ['erlang'],
    'sql': ['sql'],
    'nodejs': ['node'],
    'c#': ['c#'],
    'css': ['css'],
    'javascript': ['javascript'],
    'ftp': ['ftp'],
    'haskell': ['haskell'],
    'unity': ['unity'],
    'terminal': ['terminal'],
    'powershell': ['powershell'],
    'laravel': ['laravel'],
    'meteor': ['meteor'],
    'emmet': ['emmet'],
    'eslint': ['linters'],
    'tfs': ['tfs'],
    'rust': ['rust']
};
exports.TagsProcessor = TagsProcessor;
var MarkdownProcessor = (function (_super) {
    __extends(MarkdownProcessor, _super);
    function MarkdownProcessor(manifest, regexp, assetType, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, manifest) || this;
        _this.regexp = regexp;
        _this.assetType = assetType;
        var guess = _this.guessBaseUrls();
        _this.baseContentUrl = options.baseContentUrl || (guess && guess.content);
        _this.baseImagesUrl = options.baseImagesUrl || options.baseContentUrl || (guess && guess.images);
        return _this;
    }
    MarkdownProcessor.prototype.onFile = function (file) {
        var _this = this;
        var path = util.normalize(file.path);
        if (!this.regexp.test(path)) {
            return Promise.resolve(file);
        }
        this.assets.push({ type: this.assetType, path: path });
        return read(file)
            .then(function (contents) {
            if (/This is the README for your extension /.test(contents)) {
                return Promise.reject(new Error("Make sure to edit the README.md file before you publish your extension."));
            }
            if (!_this.baseContentUrl && !_this.baseImagesUrl) {
                console.warn('Couldn\'t detect the repository where this extension is published. Images might be broken in its README.');
            }
            else {
                var markdownPathRegex_1 = /(!?)\[([^\]\[]+|!\[[^\]\[]+]\([^\)]+\))\]\(([^\)]+)\)/g;
                var urlReplace_1 = function (all, isImage, title, link) {
                    title = title.replace(markdownPathRegex_1, urlReplace_1);
                    var prefix = isImage ? _this.baseImagesUrl : _this.baseContentUrl;
                    if (!prefix || /^\w+:\/\//.test(link) || link[0] === '#') {
                        return isImage + "[" + title + "](" + link + ")";
                    }
                    return isImage + "[" + title + "](" + urljoin(prefix, link) + ")";
                };
                contents = contents.replace(markdownPathRegex_1, urlReplace_1);
            }
            return {
                path: file.path,
                contents: new Buffer(contents)
            };
        });
    };
    // GitHub heuristics
    MarkdownProcessor.prototype.guessBaseUrls = function () {
        var repository = null;
        if (typeof this.manifest.repository === 'string') {
            repository = this.manifest.repository;
        }
        else if (this.manifest.repository && typeof this.manifest.repository['url'] === 'string') {
            repository = this.manifest.repository['url'];
        }
        if (!repository) {
            return null;
        }
        var regex = /github\.com\/([^/]+)\/([^/]+)(\/|$)/;
        var match = regex.exec(repository);
        if (!match) {
            return null;
        }
        var account = match[1];
        var repositoryName = match[2].replace(/\.git$/i, '');
        return {
            content: "https://github.com/" + account + "/" + repositoryName + "/blob/master",
            images: "https://github.com/" + account + "/" + repositoryName + "/raw/master"
        };
    };
    return MarkdownProcessor;
}(BaseProcessor));
exports.MarkdownProcessor = MarkdownProcessor;
var ReadmeProcessor = (function (_super) {
    __extends(ReadmeProcessor, _super);
    function ReadmeProcessor(manifest, options) {
        if (options === void 0) { options = {}; }
        return _super.call(this, manifest, /^extension\/readme.md$/i, 'Microsoft.VisualStudio.Services.Content.Details', options) || this;
    }
    return ReadmeProcessor;
}(MarkdownProcessor));
exports.ReadmeProcessor = ReadmeProcessor;
var ChangelogProcessor = (function (_super) {
    __extends(ChangelogProcessor, _super);
    function ChangelogProcessor(manifest, options) {
        if (options === void 0) { options = {}; }
        return _super.call(this, manifest, /^extension\/changelog.md$/i, 'Microsoft.VisualStudio.Services.Content.Changelog', options) || this;
    }
    return ChangelogProcessor;
}(MarkdownProcessor));
exports.ChangelogProcessor = ChangelogProcessor;
var LicenseProcessor = (function (_super) {
    __extends(LicenseProcessor, _super);
    function LicenseProcessor(manifest) {
        var _this = _super.call(this, manifest) || this;
        _this.didFindLicense = false;
        var match = /^SEE LICENSE IN (.*)$/.exec(manifest.license || '');
        if (!match || !match[1]) {
            _this.filter = function (name) { return /^extension\/license(\.(md|txt))?$/i.test(name); };
        }
        else {
            var regexp = new RegExp('^extension/' + match[1] + '$');
            _this.filter = regexp.test.bind(regexp);
        }
        _this.vsix.license = null;
        return _this;
    }
    LicenseProcessor.prototype.onFile = function (file) {
        if (!this.didFindLicense) {
            var normalizedPath = util.normalize(file.path);
            if (this.filter(normalizedPath)) {
                if (!path.extname(normalizedPath)) {
                    file.path += '.txt';
                    normalizedPath += '.txt';
                }
                this.assets.push({ type: 'Microsoft.VisualStudio.Services.Content.License', path: normalizedPath });
                this.vsix.license = normalizedPath;
                this.didFindLicense = true;
            }
        }
        return Promise.resolve(file);
    };
    return LicenseProcessor;
}(BaseProcessor));
var IconProcessor = (function (_super) {
    __extends(IconProcessor, _super);
    function IconProcessor(manifest) {
        var _this = _super.call(this, manifest) || this;
        _this.didFindIcon = false;
        _this.icon = manifest.icon ? "extension/" + manifest.icon : null;
        _this.vsix.icon = null;
        return _this;
    }
    IconProcessor.prototype.onFile = function (file) {
        var normalizedPath = util.normalize(file.path);
        if (normalizedPath === this.icon) {
            this.didFindIcon = true;
            this.assets.push({ type: 'Microsoft.VisualStudio.Services.Icons.Default', path: normalizedPath });
            this.vsix.icon = this.icon;
        }
        return Promise.resolve(file);
    };
    IconProcessor.prototype.onEnd = function () {
        if (this.icon && !this.didFindIcon) {
            return Promise.reject(new Error("The specified icon '" + this.icon + "' wasn't found in the extension."));
        }
        return Promise.resolve(null);
    };
    return IconProcessor;
}(BaseProcessor));
function validateManifest(manifest) {
    validation_1.validatePublisher(manifest.publisher);
    validation_1.validateExtensionName(manifest.name);
    if (!manifest.version) {
        throw new Error('Manifest missing field: version');
    }
    validation_1.validateVersion(manifest.version);
    if (!manifest.engines) {
        throw new Error('Manifest missing field: engines');
    }
    if (!manifest.engines['vscode']) {
        throw new Error('Manifest missing field: engines.vscode');
    }
    validation_1.validateEngineCompatibility(manifest.engines['vscode']);
    return manifest;
}
exports.validateManifest = validateManifest;
function readManifest(cwd, nls) {
    if (cwd === void 0) { cwd = process.cwd(); }
    if (nls === void 0) { nls = true; }
    var manifestPath = path.join(cwd, 'package.json');
    var manifestNLSPath = path.join(cwd, 'package.nls.json');
    var manifest = readFile(manifestPath, 'utf8')
        .catch(function () { return Promise.reject("Extension manifest not found: " + manifestPath); })
        .then(function (manifestStr) {
        try {
            return Promise.resolve(JSON.parse(manifestStr));
        }
        catch (e) {
            return Promise.reject("Error parsing 'package.json' manifest file: not a valid JSON file.");
        }
    })
        .then(validateManifest);
    if (!nls) {
        return manifest;
    }
    var manifestNLS = readFile(manifestNLSPath, 'utf8')
        .catch(function (err) { return err.code !== 'ENOENT' ? Promise.reject(err) : Promise.resolve('{}'); })
        .then(function (raw) {
        try {
            return Promise.resolve(JSON.parse(raw));
        }
        catch (e) {
            return Promise.reject("Error parsing manifest translations file: not a valid JSON file.");
        }
    });
    return Promise.all([manifest, manifestNLS]).then(function (_a) {
        var manifest = _a[0], translations = _a[1];
        return nls_1.patchNLS(manifest, translations);
    });
}
exports.readManifest = readManifest;
function writeManifest(cwd, manifest) {
    var manifestPath = path.join(cwd, 'package.json');
    return writeFile(manifestPath, JSON.stringify(manifest, null, 4), 'utf8');
}
exports.writeManifest = writeManifest;
function toVsixManifest(assets, vsix, options) {
    if (options === void 0) { options = {}; }
    return readFile(vsixManifestTemplatePath, 'utf8')
        .then(function (vsixManifestTemplateStr) { return _.template(vsixManifestTemplateStr); })
        .then(function (vsixManifestTemplate) { return vsixManifestTemplate(vsix); });
}
exports.toVsixManifest = toVsixManifest;
var defaultExtensions = {
    '.json': 'application/json',
    '.vsixmanifest': 'text/xml'
};
function toContentTypes(files) {
    var extensions = Object.keys(_.keyBy(files, function (f) { return path.extname(f.path).toLowerCase(); }))
        .filter(function (e) { return !!e; })
        .reduce(function (r, e) {
        return _.assign(r, (_a = {}, _a[e] = mime.lookup(e), _a));
        var _a;
    }, {});
    var allExtensions = _.assign({}, extensions, defaultExtensions);
    var contentTypes = Object.keys(allExtensions).map(function (extension) { return ({
        extension: extension,
        contentType: allExtensions[extension]
    }); });
    return readFile(contentTypesTemplatePath, 'utf8')
        .then(function (contentTypesTemplateStr) { return _.template(contentTypesTemplateStr); })
        .then(function (contentTypesTemplate) { return contentTypesTemplate({ contentTypes: contentTypes }); });
}
exports.toContentTypes = toContentTypes;
var defaultIgnore = [
    '.vscodeignore',
    '**/.git/**',
    '**/*.vsix',
    '**/.DS_Store',
    '**/*.vsixmanifest'
];
function collectAllFiles(cwd) {
    return npm_1.getDependencies(cwd).then(function (deps) {
        var promises = deps.map(function (dep) {
            return glob('**', { cwd: dep, nodir: true, dot: true, ignore: 'node_modules/**' })
                .then(function (files) { return files
                .map(function (f) { return path.relative(cwd, path.join(dep, f)); })
                .map(function (f) { return f.replace(/\\/g, '/'); }); });
        });
        return Promise.all(promises).then(util.flatten);
    });
}
function collectFiles(cwd) {
    return collectAllFiles(cwd).then(function (files) {
        files = files.filter(function (f) { return !/\r$/m.test(f); });
        return readFile(path.join(cwd, '.vscodeignore'), 'utf8')
            .catch(function (err) { return err.code !== 'ENOENT' ? Promise.reject(err) : Promise.resolve(''); })
            .then(function (rawIgnore) { return rawIgnore.split(/[\n\r]/).map(function (s) { return s.trim(); }).filter(function (s) { return !!s; }); })
            .then(function (ignore) { return defaultIgnore.concat(ignore); })
            .then(function (ignore) { return ignore.filter(function (i) { return !/^\s*#/.test(i); }); })
            .then(function (ignore) { return _.partition(ignore, function (i) { return !/^\s*!/.test(i); }); })
            .then(function (r) { return ({ ignore: r[0], negate: r[1] }); })
            .then(function (_a) {
            var ignore = _a.ignore, negate = _a.negate;
            return files.filter(function (f) { return !ignore.some(function (i) { return minimatch(f, i, MinimatchOptions); }) || negate.some(function (i) { return minimatch(f, i.substr(1), MinimatchOptions); }); });
        });
    });
}
function processFiles(processors, files, options) {
    if (options === void 0) { options = {}; }
    var processedFiles = files.map(function (file) { return util.chain(file, processors, function (file, processor) { return processor.onFile(file); }); });
    return Promise.all(processedFiles).then(function (files) {
        return Promise.all(processors.map(function (p) { return p.onEnd(); })).then(function () {
            var assets = _.flatten(processors.map(function (p) { return p.assets; }));
            var vsix = _.assign.apply(_, [{ assets: assets }].concat(processors.map(function (p) { return p.vsix; })));
            return Promise.all([toVsixManifest(assets, vsix, options), toContentTypes(files)]).then(function (result) {
                return [
                    { path: 'extension.vsixmanifest', contents: new Buffer(result[0], 'utf8') },
                    { path: '[Content_Types].xml', contents: new Buffer(result[1], 'utf8') }
                ].concat(files);
            });
        });
    });
}
exports.processFiles = processFiles;
function createDefaultProcessors(manifest, options) {
    if (options === void 0) { options = {}; }
    return [
        new ManifestProcessor(manifest),
        new TagsProcessor(manifest),
        new ReadmeProcessor(manifest, options),
        new ChangelogProcessor(manifest, options),
        new LicenseProcessor(manifest),
        new IconProcessor(manifest)
    ];
}
exports.createDefaultProcessors = createDefaultProcessors;
function collect(manifest, options) {
    if (options === void 0) { options = {}; }
    var cwd = options.cwd || process.cwd();
    var processors = createDefaultProcessors(manifest, options);
    return collectFiles(cwd).then(function (fileNames) {
        var files = fileNames.map(function (f) { return ({ path: "extension/" + f, localPath: path.join(cwd, f) }); });
        return processFiles(processors, files, options);
    });
}
exports.collect = collect;
function writeVsix(files, packagePath) {
    return unlink(packagePath)
        .catch(function (err) { return err.code !== 'ENOENT' ? Promise.reject(err) : Promise.resolve(null); })
        .then(function () { return new Promise(function (c, e) {
        var zip = new yazl.ZipFile();
        files.forEach(function (f) { return f.contents ? zip.addBuffer(f.contents, f.path) : zip.addFile(f.localPath, f.path); });
        zip.end();
        var zipStream = fs.createWriteStream(packagePath);
        zip.outputStream.pipe(zipStream);
        zip.outputStream.once('error', e);
        zipStream.once('error', e);
        zipStream.once('finish', function () { return c(packagePath); });
    }); });
}
function defaultPackagePath(cwd, manifest) {
    return path.join(cwd, manifest.name + "-" + manifest.version + ".vsix");
}
function prepublish(cwd, manifest) {
    if (!manifest.scripts || !manifest.scripts['vscode:prepublish']) {
        return Promise.resolve(manifest);
    }
    console.warn("Executing prepublish script 'npm run vscode:prepublish'...");
    return exec('npm run vscode:prepublish', { cwd: cwd })
        .then(function (_a) {
        var stdout = _a.stdout, stderr = _a.stderr;
        process.stdout.write(stdout);
        process.stderr.write(stderr);
        return Promise.resolve(manifest);
    })
        .catch(function (err) { return Promise.reject(err.message); });
}
function pack(options) {
    if (options === void 0) { options = {}; }
    var cwd = options.cwd || process.cwd();
    return readManifest(cwd)
        .then(function (manifest) { return prepublish(cwd, manifest); })
        .then(function (manifest) { return collect(manifest, options)
        .then(function (files) { return writeVsix(files, path.resolve(options.packagePath || defaultPackagePath(cwd, manifest)))
        .then(function (packagePath) { return ({ manifest: manifest, packagePath: packagePath }); }); }); });
}
exports.pack = pack;
function packageCommand(options) {
    if (options === void 0) { options = {}; }
    return pack(options)
        .then(function (_a) {
        var packagePath = _a.packagePath;
        return console.log("Created: " + packagePath);
    });
}
exports.packageCommand = packageCommand;
function ls(cwd) {
    if (cwd === void 0) { cwd = process.cwd(); }
    return readManifest(cwd)
        .then(function (manifest) { return prepublish(cwd, manifest); })
        .then(function (manifest) { return collectFiles(cwd); })
        .then(function (files) { return files.forEach(function (f) { return console.log("" + f); }); });
}
exports.ls = ls;

//# sourceMappingURL=package.js.map
